{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "applicationGatewayName": {
      "type": "String",
      "metadata": {
        "description": "Application gateway name"
      }
    },
    "location": {
      "type": "String",
      "metadata": {
        "description": "Application gateway location"
      }
    },
    "tier": {
      "allowedValues": ["Standard", "WAF", "Standard_v2", "WAF_v2"],
      "type": "String",
      "metadata": {
        "description": "Application gateway tier"
      }
    },
    "sku": {
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large",
        "WAF_Medium",
        "WAF_Large",
        "Standard_v2",
        "WAF_v2"
      ],
      "type": "String",
      "metadata": {
        "description": "Application gateway sku"
      }
    },
    "http2Enabled": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "Enable HTTP/2 support"
      }
    },
    "capacity": {
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 32,
      "type": "Int"
    },
    "autoScaleMaxCapacity": {
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 32,
      "type": "Int"
    },
    "publicIpAddressName": {
      "type": "String",
      "metadata": {
        "description": "Public ip address name"
      }
    },
    "vNetSubscriptionId": {
      "defaultValue": "[subscription().subscriptionId]",
      "type": "String",
      "metadata": {
        "description": "Virutal network subscription id"
      }
    },
    "vNetResourceGroup": {
      "type": "String",
      "metadata": {
        "description": "Virutal network resource group"
      }
    },
    "vNetName": {
      "type": "String",
      "metadata": {
        "description": "Virutal network name"
      }
    },
    "subnetName": {
      "type": "String",
      "metadata": {
        "description": "Application gateway subnet name"
      }
    },
    "httpListeners": {
      "type": "Array",
      "metadata": {
        "description": "Array containing http listeners"
      }
    },
    "backendAddressPools": {
      "type": "Array",
      "metadata": {
        "description": "Array containing backend address pools"
      }
    },
    "backendHttpSettings": {
      "type": "Array",
      "metadata": {
        "description": "Array containing backend http settings"
      }
    },
    "rules": {
      "type": "Array",
      "metadata": {
        "description": "Array containing request routing rules"
      }
    },
    "frontEndPorts": {
      "type": "Array",
      "metadata": {
        "description": "Array containing front end ports"
      }
    },
    "enableWebApplicationFirewall": {
      "defaultValue": false,
      "type": "Bool",
      "metadata": {
        "description": "Enable web application firewall"
      }
    },
    "firewallPolicyName": {
      "type": "String",
      "metadata": {
        "description": "Name of the firewall policy"
      }
    },
    "firewallPolicySettings": {
      "defaultValue": {
        "requestBodyCheck": true,
        "maxRequestBodySizeInKb": 128,
        "fileUploadLimitInMb": 100,
        "state": "Enabled",
        "mode": "Detection"
      },
      "type": "Object",
      "metadata": {
        "description": "Array containing the firewall policy settings"
      }
    },
    "firewallPolicyCustomRules": {
      "defaultValue": [],
      "type": "Array",
      "metadata": {
        "description": "Array containing the firewall policy custom rules."
      }
    },
    "firewallPolicyManagedRuleSets": {
      "type": "Array",
      "metadata": {
        "ruleSetType": "Rule set type",
        "ruleSetVersion": "Rule set version",
        "description": "Array containing the firewall policy managed rule sets."
      }
    },
    "firewallPolicyManagedRuleExclusions": {
      "defaultValue": [],
      "type": "Array"
    }
  },
  "variables": {
    "gatewayIpConfigurationName": "appGatewayIpConfig",
    "frontendIpConfigurationName": "appGwPublicFrontendIp"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2021-03-01",
      "name": "[parameters('publicIpAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2021-03-01",
      "name": "[parameters('applicationGatewayName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', if(equals(parameters('firewallPolicyName'), ''), 'placeholdervalue', parameters('firewallPolicyName')))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
      ],
      "properties": {
        "copy": [
          {
            "name": "frontendPorts",
            "count": "[length(parameters('frontEndPorts'))]",
            "input": {
              "name": "[parameters('frontEndPorts')[copyIndex('frontendPorts')].name]",
              "properties": {
                "port": "[parameters('frontEndPorts')[copyIndex('frontendPorts')].port]"
              }
            }
          },
          {
            "name": "backendAddressPools",
            "count": "[length(parameters('backendAddressPools'))]",
            "input": {
              "name": "[parameters('backendAddressPools')[copyIndex('backendAddressPools')].name]",
              "properties": {
                "backendAddresses": "[parameters('backendAddressPools')[copyIndex('backendAddressPools')].backendAddresses]"
              }
            }
          },
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('backendHttpSettings'))]",
            "input": {
              "name": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].name]",
              "properties": {
                "port": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].port]",
                "protocol": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].protocol]",
                "cookieBasedAffinity": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].cookieBasedAffinity]",
                "affinityCookieName": "[if(contains(parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')], 'affinityCookieName'), parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].affinityCookieName, null())]",
                "requestTimeout": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].requestTimeout]",
                "connectionDraining": "[parameters('backendHttpSettings')[copyIndex('backendHttpSettingsCollection')].connectionDraining]"
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('httpListeners'))]",
            "input": {
              "name": "[parameters('httpListeners')[copyIndex('httpListeners')].name]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), variables('frontendIpConfigurationName'))]"
                },
                "frontendPort": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].frontEndPort)]"
                },
                "protocol": "[parameters('httpListeners')[copyIndex('httpListeners')].protocol]"
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('rules'))]",
            "input": {
              "name": "[parameters('rules')[copyIndex('requestRoutingRules')].name]",
              "properties": {
                "ruleType": "[parameters('rules')[copyIndex('requestRoutingRules')].ruleType]",
                "httpListener": "[if(contains(parameters('rules')[copyIndex('requestRoutingRules')], 'listener'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), parameters('rules')[copyIndex('requestRoutingRules')].listener))), null())]",
                "backendAddressPool": "[if(contains(parameters('rules')[copyIndex('requestRoutingRules')], 'backendPool'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), parameters('rules')[copyIndex('requestRoutingRules')].backendPool))), null())]",
                "backendHttpSettings": "[if(contains(parameters('rules')[copyIndex('requestRoutingRules')], 'backendHttpSettings'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), parameters('rules')[copyIndex('requestRoutingRules')].backendHttpSettings))), null())]"
              }
            }
          }
        ],
        "sku": {
          "name": "[parameters('sku')]",
          "tier": "[parameters('tier')]"
        },
        "autoscaleConfiguration": {
          "minCapacity": "[parameters('capacity')]",
          "maxCapacity": "[parameters('autoScaleMaxCapacity')]"
        },
        "enableHttp2": "[parameters('http2Enabled')]",
        "webApplicationFirewallConfiguration": "[if(parameters('enableWebApplicationFirewall'), createObject('enabled', if(equals(parameters('firewallPolicySettings').state, 'Enabled'), true(), false()), 'firewallMode', parameters('firewallPolicySettings').mode, 'ruleSetType', 'OWASP', 'ruleSetVersion', '3.2'), null())]",
        "gatewayIPConfigurations": [
          {
            "name": "[variables('gatewayIpConfigurationName')]",
            "properties": {
              "subnet": {
                "id": "[resourceId(parameters('vNetSubscriptionId'), parameters('vNetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetName'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendIpConfigurationName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
              }
            }
          }
        ],
        "firewallPolicy": "[if(parameters('enableWebApplicationFirewall'), createObject('id', resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', if(equals(parameters('firewallPolicyName'), ''), 'placeholdervalue', parameters('firewallPolicyName')))), null())]"
      }
    },
    {
      "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
      "apiVersion": "2021-03-01",
      "name": "[if(equals(parameters('firewallPolicyName'), ''), 'placeholdervalue', parameters('firewallPolicyName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "customRules": "[parameters('firewallPolicyCustomRules')]",
        "policySettings": "[parameters('firewallPolicySettings')]",
        "managedRules": {
          "managedRuleSets": "[parameters('firewallPolicyManagedRuleSets')]",
          "exclusions": "[parameters('firewallPolicyManagedRuleExclusions')]"
        }
      },
      "condition": "[parameters('enableWebApplicationFirewall')]"
    }
  ],
  "outputs": {
    "name": {
      "type": "String",
      "value": "[parameters('applicationGatewayName')]"
    },
    "id": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]"
    }
  }
}
